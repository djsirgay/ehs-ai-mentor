from dotenv import load_dotenv
load_dotenv()

from fastapi import FastAPI, HTTPException, UploadFile, File, Form
from fastapi.responses import HTMLResponse
from ai_mentor import AIMentor
from pdf_processor import extract_text_from_pdf
from document_tracker import DocumentTracker
from course_scheduler import CourseScheduler
from audit_logger import AuditLogger
from user_dashboard import generate_user_dashboard_html
from course_completion import CourseCompletion

app = FastAPI(title="EHS AI Mentor", version="1.0.0")
mentor = AIMentor()
doc_tracker = DocumentTracker()
scheduler = CourseScheduler()
audit_logger = AuditLogger()
course_completion = CourseCompletion()

@app.post("/upload-pdf")
async def upload_pdf(file: UploadFile = File(...)):
    try:
        if not file.filename.endswith('.pdf'):
            raise HTTPException(status_code=400, detail="–¢–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã")
        
        pdf_bytes = await file.read()
        protocol_text = extract_text_from_pdf(pdf_bytes)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Ä–∞–Ω–µ–µ
        is_duplicate, prev_info = doc_tracker.is_duplicate(protocol_text)
        
        if is_duplicate:
            return {
                "is_duplicate": True,
                "message": "–≠—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è",
                "previous_processing": prev_info,
                "extracted_text": protocol_text[:500] + "..." if len(protocol_text) > 500 else protocol_text
            }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Å—Ä–æ–∫–æ–≤
        mentor._scheduler = scheduler  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        result = mentor.analyze_for_all_users_with_history(protocol_text, doc_tracker)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏
        doc_hash = doc_tracker.save_document(protocol_text, result.get("assignments", []), result.get("skipped_duplicates", []))
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
        audit_logger.log_document_processed(
            doc_hash, 
            len(result.get("assignments", [])),
            protocol_text[:100] + "..."
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å —Ö—ç—à–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞
        for assignment in result.get("assignments", []):
            for course_id in assignment["courses_assigned"]:
                clean_course_id = course_id.replace(" (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)", "")
                priority = "normal"
                if assignment.get("course_periods"):
                    for period in assignment["course_periods"]:
                        if period["course_id"] == clean_course_id:
                            priority = period.get("priority", "normal")
                            break
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ö—ç—à –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –ª–æ–≥
                log_entry = {
                    "timestamp": audit_logger.logs[-1]["timestamp"] if audit_logger.logs else "2025-01-01T00:00:00",
                    "action": "course_assigned",
                    "user_id": assignment["user_id"],
                    "course_id": clean_course_id,
                    "assigned_by": "AI",
                    "reason": assignment.get("reason", ""),
                    "priority": priority,
                    "document_hash": doc_hash,
                    "id": len(audit_logger.logs) + 1
                }
                audit_logger.logs.append(log_entry)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏
        audit_logger.save_logs()
        
        result["extracted_text"] = protocol_text[:500] + "..." if len(protocol_text) > 500 else protocol_text
        result["is_duplicate"] = False
        result["document_hash"] = doc_hash
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∫—É—Ä—Å–∞—Ö
        expired_courses = scheduler.get_expired_courses(doc_tracker)
        result["expired_courses"] = expired_courses
        
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/")
async def root():
    html = '''
<!DOCTYPE html>
<html>
<head>
    <title>EHS AI Mentor</title>
    <style>
        body { font-family: Arial; max-width: 800px; margin: 50px auto; padding: 20px; }
        .container { background: #f5f5f5; padding: 30px; border-radius: 10px; }
        h1 { color: #333; text-align: center; }
        button { background: #007bff; color: white; cursor: pointer; font-size: 16px; padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px; }
        .result { margin-top: 20px; padding: 15px; background: white; border-radius: 5px; border-left: 4px solid #28a745; }
        .course { background: #e7f3ff; padding: 4px 8px; margin: 2px; border-radius: 3px; display: inline-block; }
        .assignment { background: #f8f9fa; padding: 10px; margin: 5px 0; border-radius: 5px; border-left: 3px solid #007bff; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üõ°Ô∏è EHS AI Mentor</h1>
        
        <div id="statsBlocks" style="display: flex; gap: 15px; margin: 20px 0; flex-wrap: wrap;">
            <div class="stat-block" onclick="showUsers()" style="background: #e3f2fd; padding: 15px; border-radius: 8px; text-align: center; min-width: 120px; flex: 1; cursor: pointer; transition: transform 0.2s;" onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                <div style="font-size: 24px; font-weight: bold; color: #1976d2;" id="userCount">-</div>
                <div style="font-size: 12px; color: #666;">üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
            </div>
            <div class="stat-block" onclick="showCourses()" style="background: #f3e5f5; padding: 15px; border-radius: 8px; text-align: center; min-width: 120px; flex: 1; cursor: pointer; transition: transform 0.2s;" onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                <div style="font-size: 24px; font-weight: bold; color: #7b1fa2;" id="courseCount">-</div>
                <div style="font-size: 12px; color: #666;">üìö –ö—É—Ä—Å–æ–≤</div>
            </div>
            <div class="stat-block" onclick="showAssignments()" style="background: #e8f5e8; padding: 15px; border-radius: 8px; text-align: center; min-width: 120px; flex: 1; cursor: pointer; transition: transform 0.2s;" onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                <div style="font-size: 24px; font-weight: bold; color: #388e3c;" id="assignmentCount">-</div>
                <div style="font-size: 12px; color: #666;">üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–π</div>
            </div>
            <div class="stat-block" onclick="showDocuments()" style="background: #fff3e0; padding: 15px; border-radius: 8px; text-align: center; min-width: 120px; flex: 1; cursor: pointer; transition: transform 0.2s;" onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                <div style="font-size: 24px; font-weight: bold; color: #f57c00;" id="documentCount">-</div>
                <div style="font-size: 12px; color: #666;">üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤</div>
            </div>
            <div class="stat-block" onclick="showCompletions()" style="background: #e8f5e8; padding: 15px; border-radius: 8px; text-align: center; min-width: 120px; flex: 1; cursor: pointer; transition: transform 0.2s;" onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                <div style="font-size: 24px; font-weight: bold; color: #28a745;" id="completionCount">-</div>
                <div style="font-size: 12px; color: #666;">‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
            </div>
            <div class="stat-block" onclick="showExpired()" style="background: #f8d7da; padding: 15px; border-radius: 8px; text-align: center; min-width: 120px; flex: 1; cursor: pointer; transition: transform 0.2s;" onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                <div style="font-size: 24px; font-weight: bold; color: #dc3545;" id="expiredCount">-</div>
                <div style="font-size: 12px; color: #666;">‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ</div>
            </div>
            <div class="stat-block" onclick="showCritical()" style="background: #fff3cd; padding: 15px; border-radius: 8px; text-align: center; min-width: 120px; flex: 1; cursor: pointer; transition: transform 0.2s;" onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                <div style="font-size: 24px; font-weight: bold; color: #fd7e14;" id="criticalCount">-</div>
                <div style="font-size: 12px; color: #666;">üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö</div>
            </div>
            <div class="stat-block" onclick="showActive()" style="background: #d1ecf1; padding: 15px; border-radius: 8px; text-align: center; min-width: 120px; flex: 1; cursor: pointer; transition: transform 0.2s;" onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                <div style="font-size: 24px; font-weight: bold; color: #17a2b8;" id="activeCount">-</div>
                <div style="font-size: 12px; color: #666;">‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
            </div>
        </div>
        <p><strong>AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∫—É—Ä—Å—ã –Ω—É–∂–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</strong></p>
        
        <div style="margin: 20px 0; padding: 20px; background: #fff; border-radius: 5px; border: 2px dashed #ddd;">
            <label><strong>–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º:</strong></label><br>
            <p>‚ö° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–µ—Ä–≤—ã—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (~30-40 —Å–µ–∫—É–Ω–¥)</p>
            <input type="file" id="pdfFile" accept=".pdf" style="margin: 10px 0; padding: 10px;">
            <button onclick="uploadPDF()">ü§ñ AI –ê–Ω–∞–ª–∏–∑</button>
            <button onclick="checkExpired()" style="background: #ffc107; color: #000;">‚è∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–æ–∫–∏</button>
            <button onclick="showAuditLog()" style="background: #6c757d; color: #fff;">üìà Audit Log</button>
        </div>

        <div id="result"></div>
        <div id="documentHistory" style="margin-top: 20px;"></div>
    </div>

    <script>
        async function uploadPDF() {
            const fileInput = document.getElementById('pdfFile');
            const resultDiv = document.getElementById('result');
            
            if (!fileInput.files[0]) {
                resultDiv.innerHTML = '<div class="result">–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª!</div>';
                return;
            }

            resultDiv.innerHTML = '<div class="result">ü§ñ AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª —á–µ—Ä–µ–∑ Amazon Bedrock...<br>‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ 30-40 —Å–µ–∫—É–Ω–¥ –¥–ª—è 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>';

            try {
                const formData = new FormData();
                formData.append('file', fileInput.files[0]);
                
                const response = await fetch('/upload-pdf', {
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();
                displayResult(data);

            } catch (error) {
                console.error('Error:', error);
                resultDiv.innerHTML = '<div class="result">‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏</div>';
            }
        }
        
        async function loadDocumentHistory() {
            try {
                const response = await fetch('/document-history');
                const data = await response.json();
                
                const historyDiv = document.getElementById('documentHistory');
                
                if (data.documents && data.documents.length > 0) {
                    let html = '<h3>üìÑ –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (' + data.total_documents + '):</h3>';
                    
                    data.documents.forEach((doc, index) => {
                        const date = new Date(doc.processed_at).toLocaleString();
                        
                        html += `<div style="background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 8px; padding: 15px; margin: 10px 0;">`;
                        html += `<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">`;
                        html += `<strong>üìÑ ${doc.title}</strong>`;
                        html += `<button onclick="toggleDetails('doc${index}')" style="background: #007bff; color: white; border: none; padding: 5px 10px; border-radius: 3px; cursor: pointer;">üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏</button>`;
                        html += `</div>`;
                        html += `<div style="color: #6c757d; font-size: 12px;">‚è∞ ${date} | üéØ ${doc.assignments_count} –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π</div>`;
                        
                        // –°–∫—Ä—ã—Ç—ã–µ –¥–µ—Ç–∞–ª–∏
                        html += `<div id="doc${index}" style="display: none; margin-top: 15px; padding-top: 15px; border-top: 1px solid #dee2e6;">`;
                        
                        if (doc.assignments && doc.assignments.length > 0) {
                            html += `<h5>üìä –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:</h5>`;
                            
                            doc.assignments.forEach(assignment => {
                                const assignDate = new Date(assignment.timestamp).toLocaleString();
                                const priorityColors = {
                                    'critical': '#dc3545',
                                    'high': '#fd7e14', 
                                    'normal': '#28a745',
                                    'low': '#6c757d'
                                };
                                
                                html += `<div style="background: white; border-left: 4px solid ${priorityColors[assignment.priority] || '#28a745'}; padding: 8px; margin: 5px 0; border-radius: 3px; font-size: 12px;">`;
                                html += `üìö <strong>${assignment.course_id}</strong> ‚Üí ${assignment.user_name || assignment.user_id}<br>`;
                                html += `üë§ ${assignment.user_role || ''}, ${assignment.user_department || ''}<br>`;
                                html += `üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${assignment.priority} | ‚è∞ –ù–∞–∑–Ω–∞—á–µ–Ω: ${assignDate}<br>`;
                                
                                // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–¥–ª–∞–π–Ω –∏ –ø–µ—Ä–∏–æ–¥
                                const assignedDate = new Date(assignment.timestamp);
                                const deadlineDays = 30; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                const renewalMonths = 12; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                const deadlineDate = new Date(assignedDate.getTime() + deadlineDays * 24 * 60 * 60 * 1000);
                                const renewalDate = new Date(assignedDate.getTime() + renewalMonths * 30 * 24 * 60 * 60 * 1000);
                                
                                html += `‚è≥ –î–µ–¥–ª–∞–π–Ω: ${deadlineDate.toLocaleDateString()} | üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${renewalDate.toLocaleDateString()}`;
                                if (assignment.reason) html += `<br>üìù ${assignment.reason}`;
                                html += `</div>`;
                            });
                        } else {
                            html += '<p style="color: #6c757d; font-style: italic;">–ù–∏–∫–æ–º—É –Ω–µ –Ω–∞–∑–Ω–∞—á–∞–ª–∏—Å—å –∫—É—Ä—Å—ã</p>';
                        }
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
                        if (doc.skipped_duplicates && doc.skipped_duplicates.length > 0) {
                            html += `<h5>‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:</h5>`;
                            doc.skipped_duplicates.forEach(skip => {
                                html += `<div style="background: #fff3cd; padding: 8px; margin: 5px 0; border-radius: 3px; font-size: 12px;">`;
                                html += `üò´ <strong>${skip.name}</strong> (${skip.user_id})<br>`;
                                html += `<strong>–ü—Ä–æ–ø—É—â–µ–Ω–æ:</strong> ${skip.skipped_courses.join(', ')}<br>`;
                                html += `<em>${skip.reason}</em>`;
                                html += `</div>`;
                            });
                        }
                        
                        html += `</div></div>`;
                    });
                    
                    historyDiv.innerHTML = html;
                } else {
                    historyDiv.innerHTML = '';
                }
                
            } catch (error) {
                console.error('Error loading document history:', error);
            }
        }
        
        function toggleDetails(id) {
            const element = document.getElementById(id);
            if (element.style.display === 'none') {
                element.style.display = 'block';
            } else {
                element.style.display = 'none';
            }
        }
        
        async function loadStats() {
            try {
                const response = await fetch('/stats');
                const data = await response.json();
                
                document.getElementById('userCount').textContent = data.users;
                document.getElementById('courseCount').textContent = data.courses;
                document.getElementById('assignmentCount').textContent = data.assignments;
                document.getElementById('documentCount').textContent = data.documents;
                document.getElementById('completionCount').textContent = data.completions || 0;
                document.getElementById('expiredCount').textContent = data.expired || 0;
                document.getElementById('criticalCount').textContent = data.critical || 0;
                document.getElementById('activeCount').textContent = data.active || 0;
                
            } catch (error) {
                console.error('Error loading stats:', error);
            }
        }
        
        async function showUsers() {
            const resultDiv = document.getElementById('result');
            resultDiv.innerHTML = '<div class="result">üë• –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</div>';
            
            try {
                const response = await fetch('/users-detail');
                const data = await response.json();
                
                let html = '<div class="result"><h3>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (' + data.users.length + ')</h3>';
                
                data.users.forEach(user => {
                    const lastAssignment = user.latest_assignment ? new Date(user.latest_assignment).toLocaleDateString() : '–ù–∏–∫–æ–≥–¥–∞';
                    
                    html += `<div style="background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; padding: 12px; margin: 8px 0;">`;
                    html += `<strong onclick="showUserProfile('${user.user_id}')" style="color: #007bff; cursor: pointer; text-decoration: underline;">üë§ ${user.name}</strong> (${user.user_id}) <span style="color: #007bff; font-size: 12px;">‚û§ –ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è</span><br>`;
                    html += `üè¢ ${user.role} | ${user.department}<br>`;
                    html += `üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–π: ${user.assignments_count} | –ü–æ—Å–ª–µ–¥–Ω–µ–µ: ${lastAssignment}`;
                    html += `</div>`;
                });
                
                html += '</div>';
                resultDiv.innerHTML = html;
            } catch (error) {
                resultDiv.innerHTML = '<div class="result">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>';
            }
        }
        
        async function showCourses() {
            const resultDiv = document.getElementById('result');
            resultDiv.innerHTML = '<div class="result">üìö –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤...</div>';
            
            try {
                const response = await fetch('/courses-detail');
                const data = await response.json();
                
                let html = '<div class="result"><h3>üìö –ö—É—Ä—Å—ã (' + data.courses.length + ')</h3>';
                
                data.courses.forEach(course => {
                    const lastAssignment = course.latest_assignment ? new Date(course.latest_assignment).toLocaleDateString() : '–ù–∏–∫–æ–≥–¥–∞';
                    
                    html += `<div style="background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; padding: 12px; margin: 8px 0;">`;
                    html += `<strong>üìö ${course.course_name}</strong> (${course.course_id})<br>`;
                    html += `üìù ${course.description}<br>`;
                    html += `üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–π: ${course.assignments_count} | –ü–æ—Å–ª–µ–¥–Ω–µ–µ: ${lastAssignment}<br>`;
                    html += `üîÑ –ü–µ—Ä–∏–æ–¥: ${course.renewal_months} –º–µ—Å. | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${course.priority}`;
                    html += `</div>`;
                });
                
                html += '</div>';
                resultDiv.innerHTML = html;
            } catch (error) {
                resultDiv.innerHTML = '<div class="result">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤</div>';
            }
        }
        
        async function showAssignments() {
            const resultDiv = document.getElementById('result');
            resultDiv.innerHTML = '<div class="result">üéØ –ó–∞–≥—Ä—É–∂–∞—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è...</div>';
            
            try {
                const response = await fetch('/assignments-detail');
                const data = await response.json();
                
                let html = '<div class="result"><h3>üéØ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (' + data.assignments.length + ')</h3>';
                
                data.assignments.forEach(assignment => {
                    const date = new Date(assignment.timestamp).toLocaleString();
                    const priorityColors = {
                        'critical': '#dc3545',
                        'high': '#fd7e14', 
                        'normal': '#28a745',
                        'low': '#6c757d'
                    };
                    
                    html += `<div style="background: #f8f9fa; border-left: 4px solid ${priorityColors[assignment.priority] || '#28a745'}; padding: 10px; margin: 8px 0; border-radius: 3px;">`;
                    html += `<strong>üìö ${assignment.course_id}</strong> ‚Üí <strong onclick="showUserProfile('${assignment.user_id}')" style="color: #007bff; cursor: pointer; text-decoration: underline;">${assignment.user_name || assignment.user_id}</strong><br>`;
                    html += `üë§ ${assignment.user_role || ''}, ${assignment.user_department || ''}<br>`;
                    html += `üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${assignment.priority} | ‚è∞ ${date}<br>`;
                    if (assignment.reason) html += `üìù ${assignment.reason}`;
                    html += `</div>`;
                });
                
                html += '</div>';
                resultDiv.innerHTML = html;
            } catch (error) {
                resultDiv.innerHTML = '<div class="result">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π</div>';
            }
        }
        
        async function showDocuments() {
            loadDocumentHistory();
        }
        
        async function showExpired() {
            checkExpired();
        }
        
        async function showCritical() {
            const resultDiv = document.getElementById('result');
            resultDiv.innerHTML = '<div class="result">üî¥ –ó–∞–≥—Ä—É–∂–∞—é –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∫—É—Ä—Å—ã...</div>';
            
            try {
                const response = await fetch('/assignments-detail');
                const data = await response.json();
                
                const criticalAssignments = data.assignments.filter(a => a.priority === 'critical');
                
                let html = '<div class="result"><h3>üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∫—É—Ä—Å—ã (' + criticalAssignments.length + ')</h3>';
                
                if (criticalAssignments.length > 0) {
                    criticalAssignments.forEach(assignment => {
                        const date = new Date(assignment.timestamp).toLocaleString();
                        
                        html += `<div style="background: #fff3cd; border-left: 4px solid #dc3545; padding: 10px; margin: 8px 0; border-radius: 3px;">`;
                        html += `<strong>üî¥ ${assignment.course_id}</strong> ‚Üí <strong onclick="showUserProfile('${assignment.user_id}')" style="color: #007bff; cursor: pointer; text-decoration: underline;">${assignment.user_name || assignment.user_id}</strong><br>`;
                        html += `üë§ ${assignment.user_role || ''}, ${assignment.user_department || ''}<br>`;
                        html += `‚è∞ –ù–∞–∑–Ω–∞—á–µ–Ω: ${date}`;
                        if (assignment.reason) html += `<br>üìù ${assignment.reason}`;
                        html += `</div>`;
                    });
                } else {
                    html += '<p style="color: #6c757d; font-style: italic;">–ù–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫—É—Ä—Å–æ–≤</p>';
                }
                
                html += '</div>';
                resultDiv.innerHTML = html;
            } catch (error) {
                resultDiv.innerHTML = '<div class="result">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫—É—Ä—Å–æ–≤</div>';
            }
        }
        
        async function showActive() {
            const resultDiv = document.getElementById('result');
            resultDiv.innerHTML = '<div class="result">‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã...</div>';
            
            try {
                const response = await fetch('/assignments-detail');
                const data = await response.json();
                
                let html = '<div class="result"><h3>‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)</h3>';
                html += '<p>–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã, –Ω–æ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∏ –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã</p>';
                
                data.assignments.forEach(assignment => {
                    const date = new Date(assignment.timestamp).toLocaleString();
                    const priorityColors = {
                        'critical': '#dc3545',
                        'high': '#fd7e14', 
                        'normal': '#28a745',
                        'low': '#6c757d'
                    };
                    
                    html += `<div style="background: #f8f9fa; border-left: 4px solid ${priorityColors[assignment.priority] || '#28a745'}; padding: 10px; margin: 8px 0; border-radius: 3px;">`;
                    html += `<strong>‚öôÔ∏è ${assignment.course_id}</strong> ‚Üí <strong onclick="showUserProfile('${assignment.user_id}')" style="color: #007bff; cursor: pointer; text-decoration: underline;">${assignment.user_name || assignment.user_id}</strong><br>`;
                    html += `üë§ ${assignment.user_role || ''}, ${assignment.user_department || ''}<br>`;
                    html += `üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${assignment.priority} | ‚è∞ ${date}`;
                    if (assignment.reason) html += `<br>üìù ${assignment.reason}`;
                    html += `</div>`;
                });
                
                html += '</div>';
                resultDiv.innerHTML = html;
            } catch (error) {
                resultDiv.innerHTML = '<div class="result">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤</div>';
            }
        }
        
        async function showCompletions() {
            const resultDiv = document.getElementById('result');
            resultDiv.innerHTML = '<div class="result">‚úÖ –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã...</div>';
            
            try {
                const response = await fetch('/completions-detail');
                const data = await response.json();
                
                let html = '<div class="result"><h3>‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã (' + data.completions.length + ')</h3>';
                
                if (data.completions && data.completions.length > 0) {
                    data.completions.forEach(completion => {
                        const date = new Date(completion.completed_at).toLocaleString();
                        
                        html += `<div style="background: #d4edda; border-left: 4px solid #28a745; padding: 10px; margin: 8px 0; border-radius: 3px;">`;
                        html += `<strong>‚úÖ ${completion.course_id}</strong> ‚Üí <strong onclick="showUserProfile('${completion.user_id}')" style="color: #007bff; cursor: pointer; text-decoration: underline;">${completion.user_name || completion.user_id}</strong><br>`;
                        html += `üë§ ${completion.user_role || ''}, ${completion.user_department || ''}<br>`;
                        html += `‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω: ${date} | üéØ –ú–µ—Ç–æ–¥: ${completion.completion_method}`;
                        html += `</div>`;
                    });
                } else {
                    html += '<p style="color: #6c757d; font-style: italic;">–ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –∫—É—Ä—Å—ã</p>';
                }
                
                html += '</div>';
                resultDiv.innerHTML = html;
            } catch (error) {
                resultDiv.innerHTML = '<div class="result">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π</div>';
            }
        }
        
        async function showUserProfile(userId) {
            const resultDiv = document.getElementById('result');
            resultDiv.innerHTML = '<div class="result">üë§ –ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...</div>';
            
            try {
                const response = await fetch(`/user/${userId}`);
                const data = await response.json();
                
                if (data.error) {
                    resultDiv.innerHTML = `<div class="result">‚ùå ${data.error}</div>`;
                    return;
                }
                
                let html = '<div class="result">';
                html += `<h3>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>`;
                
                // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                html += `<div style="background: #e3f2fd; padding: 15px; border-radius: 8px; margin: 15px 0;">`;
                html += `<h4>üë§ ${data.user.name} (${data.user.user_id})</h4>`;
                html += `<p><strong>üè¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å:</strong> ${data.user.role}</p>`;
                html += `<p><strong>üè≠ –û—Ç–¥–µ–ª:</strong> ${data.user.department}</p>`;
                html += `<p><strong>üéØ –í—Å–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π:</strong> ${data.total_assignments}</p>`;
                html += `<p><strong>‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤:</strong> ${data.active_courses}</p>`;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                const completedCount = data.assignments.filter(a => a.is_completed).length;
                const expiredCount = data.assignments.filter(a => a.is_expired && !a.is_completed).length;
                const criticalCount = data.assignments.filter(a => a.priority === 'critical' && !a.is_completed).length;
                
                html += `<div style="display: flex; gap: 10px; margin: 15px 0; flex-wrap: wrap;">`;
                html += `<div style="background: #d4edda; padding: 8px 12px; border-radius: 5px; text-align: center; flex: 1; min-width: 80px;"><strong>${data.active_courses}</strong><br><small>‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö</small></div>`;
                html += `<div style="background: #cce5ff; padding: 8px 12px; border-radius: 5px; text-align: center; flex: 1; min-width: 80px;"><strong>${completedCount}</strong><br><small>‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ</small></div>`;
                html += `<div style="background: #f8d7da; padding: 8px 12px; border-radius: 5px; text-align: center; flex: 1; min-width: 80px;"><strong>${expiredCount}</strong><br><small>‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ</small></div>`;
                html += `<div style="background: #fff3cd; padding: 8px 12px; border-radius: 5px; text-align: center; flex: 1; min-width: 80px;"><strong>${criticalCount}</strong><br><small>üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö</small></div>`;
                html += `</div>`;
                
                html += `<p><a href="/user/${userId}/dashboard" target="_blank" style="background: #007bff; color: white; padding: 8px 16px; text-decoration: none; border-radius: 5px;">üìä –û—Ç–∫—Ä—ã—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</a></p>`;
                html += `</div>`;
                
                // –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
                if (data.assignments && data.assignments.length > 0) {
                    html += `<h4>üìö –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã (${data.assignments.length})</h4>`;
                    
                    data.assignments.forEach(assignment => {
                        const date = new Date(assignment.timestamp).toLocaleString();
                        const priorityColors = {
                            'critical': '#dc3545',
                            'high': '#fd7e14', 
                            'normal': '#28a745',
                            'low': '#6c757d'
                        };
                        
                        const statusColor = assignment.is_expired ? '#dc3545' : '#28a745';
                        const statusText = assignment.is_expired ? '‚ùå –ò—Å—Ç–µ–∫' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω';
                        
                        html += `<div style="background: #f8f9fa; border-left: 4px solid ${priorityColors[assignment.priority] || '#28a745'}; padding: 12px; margin: 8px 0; border-radius: 5px;">`;
                        html += `<div style="display: flex; justify-content: space-between; align-items: center;">`;
                        html += `<strong>üìö ${assignment.course_id}</strong>`;
                        html += `<span style="color: ${statusColor}; font-weight: bold;">${statusText}</span>`;
                        html += `</div>`;
                        html += `<div style="margin: 8px 0; font-size: 13px;">`;
                        html += `üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${assignment.priority}<br>`;
                        html += `üîÑ –ü–µ—Ä–∏–æ–¥: ${assignment.renewal_months} –º–µ—Å. | ‚è∞ –î–µ–¥–ª–∞–π–Ω: ${assignment.deadline_days} –¥–Ω–µ–π<br>`;
                        html += `‚è∞ –ù–∞–∑–Ω–∞—á–µ–Ω: ${date}`;
                        if (assignment.reason) html += `<br>üìù –ü—Ä–∏—á–∏–Ω–∞: ${assignment.reason}`;
                        html += `</div></div>`;
                    });
                } else {
                    html += '<p style="color: #6c757d; font-style: italic;">–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤</p>';
                }
                
                html += '</div>';
                resultDiv.innerHTML = html;
                
            } catch (error) {
                console.error('Error:', error);
                resultDiv.innerHTML = '<div class="result">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</div>';
            }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.onload = function() {
            loadStats();
            loadDocumentHistory();
        }

        function displayResult(data) {
            const resultDiv = document.getElementById('result');
            
            let html = '<div class="result">';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–º
            if (data.is_duplicate) {
                html += '<h3>‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è!</h3>';
                html += `<p><strong>–ü—Ä–µ–¥—ã–¥—É—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:</strong> ${data.previous_processing.processed_at}</p>`;
                html += `<p><strong>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–π —Ç–æ–≥–¥–∞:</strong> ${data.previous_processing.assignments_count}</p>`;
                html += `<p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</strong> ${data.previous_processing.assigned_users.join(', ')}</p>`;
                
                if (data.extracted_text) {
                    html += `<p><strong>–ü—Ä–æ—Ç–æ–∫–æ–ª:</strong> ${data.extracted_text}</p>`;
                }
            } else {
                html += `<h3>‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è ${data.total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>`;
                
                if (data.extracted_text) {
                    html += `<p><strong>–ü—Ä–æ—Ç–æ–∫–æ–ª:</strong> ${data.extracted_text}</p>`;
                }
                
                if (data.assignments && data.assignments.length > 0) {
                    html += `<h4>üéØ AI –Ω–∞–∑–Ω–∞—á–∏–ª –∫—É—Ä—Å—ã (${data.assignments.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):</h4>`;
                    
                    data.assignments.forEach(assignment => {
                        html += `<div class="assignment">`;
                        html += `<strong>${assignment.name}</strong> (${assignment.user_id}) - ${assignment.role}, ${assignment.department}<br>`;
                        html += `<strong>–ö—É—Ä—Å—ã —Å AI-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Å—Ä–æ–∫–∞–º–∏:</strong><br> `;
                        assignment.courses_assigned.forEach(courseId => {
                            html += `<span class="course">üìö ${courseId}</span> `;
                        });
                        if (assignment.reason) {
                            html += `<br><em>AI –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: ${assignment.reason}</em>`;
                        }
                        if (assignment.course_periods) {
                            html += `<br><strong>üîÑ AI –æ–ø—Ä–µ–¥–µ–ª–∏–ª:</strong><br> `;
                            assignment.course_periods.forEach(period => {
                                const priorityColors = {
                                    'critical': '#dc3545',
                                    'high': '#fd7e14', 
                                    'normal': '#17a2b8',
                                    'low': '#6c757d'
                                };
                                const priorityNames = {
                                    'critical': 'üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã–π',
                                    'high': 'üü† –í—ã—Å–æ–∫–∏–π',
                                    'normal': 'üü¢ –û–±—ã—á–Ω—ã–π',
                                    'low': '‚ö™ –ù–∏–∑–∫–∏–π'
                                };
                                
                                html += `<div style="background: #f8f9fa; border-left: 4px solid ${priorityColors[period.priority] || '#17a2b8'}; padding: 10px; margin: 6px 0; border-radius: 5px; font-size: 13px;">`;
                                html += `üìö <strong>${period.course_id}</strong><br>`;
                                html += `üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priorityNames[period.priority] || period.priority}<br>`;
                                html += `üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: –∫–∞–∂–¥—ã–µ ${period.months} –º–µ—Å.<br>`;
                                html += `‚è∞ –î–µ–¥–ª–∞–π–Ω: ${period.deadline_days} –¥–Ω–µ–π`;
                                html += `</div>`;
                            });
                        }
                        html += `</div>`;
                    });
                } else {
                    html += '<p>AI –æ–ø—Ä–µ–¥–µ–ª–∏–ª: –Ω–∏–∫–æ–º—É –Ω–µ –Ω—É–∂–Ω—ã –Ω–æ–≤—ã–µ –∫—É—Ä—Å—ã –ø–æ —ç—Ç–æ–º—É –ø—Ä–æ—Ç–æ–∫–æ–ª—É</p>';
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
                if (data.skipped_duplicates && data.skipped_duplicates.length > 0) {
                    html += `<h4>‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (${data.skipped_duplicates.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):</h4>`;
                    
                    data.skipped_duplicates.forEach(skip => {
                        html += `<div style="background: #fff3cd; padding: 10px; margin: 5px 0; border-radius: 5px; border-left: 3px solid #ffc107;">`;
                        html += `<strong>${skip.name}</strong> (${skip.user_id})<br>`;
                        html += `<strong>–ü—Ä–æ–ø—É—â–µ–Ω–æ:</strong> `;
                        skip.skipped_courses.forEach(courseId => {
                            html += `<span style="background: #f8d7da; padding: 4px 8px; margin: 2px; border-radius: 3px; display: inline-block;">üö´ ${courseId}</span> `;
                        });
                        html += `<br><em>${skip.reason}</em>`;
                        html += `</div>`;
                    });
                }
            }
            
            html += '</div>';
            resultDiv.innerHTML = html;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∏—Å—Ç–æ—Ä–∏—é
            loadStats();
            loadDocumentHistory();
        }
        
        async function checkExpired() {
            const resultDiv = document.getElementById('result');
            
            resultDiv.innerHTML = '<div class="result">‚è∞ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ä–æ–∫–∏ –∫—É—Ä—Å–æ–≤...</div>';
            
            try {
                const response = await fetch('/expired-courses');
                const data = await response.json();
                
                let html = '<div class="result">';
                html += `<h3>‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤ –∫—É—Ä—Å–æ–≤</h3>`;
                
                if (data.expired_users && data.expired_users.length > 0) {
                    html += `<h4>‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${data.expired_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –∫—É—Ä—Å–∞–º–∏:</h4>`;
                    
                    data.expired_users.forEach(user => {
                        html += `<div style="background: #fff3cd; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #ffc107;">`;
                        html += `<strong>${user.user_name || user.user_id}</strong> - ${user.role || ''}, ${user.department || ''}<br>`;
                        html += `<strong>–ò—Å—Ç–µ–∫–∞—é—â–∏–µ –∫—É—Ä—Å—ã:</strong><br>`;
                        
                        user.expired_courses.forEach(course => {
                            html += `<div style="margin: 5px 0; padding: 5px; background: #f8d7da; border-radius: 3px;">`;
                            html += `üö® <strong>${course.course_id}</strong><br>`;
                            html += `–ù–∞–∑–Ω–∞—á–µ–Ω: ${new Date(course.assigned_at).toLocaleDateString()}<br>`;
                            html += `–ü–µ—Ä–∏–æ–¥: ${course.period_months} –º–µ—Å—è—Ü–µ–≤`;
                            html += `</div>`;
                        });
                        
                        html += `</div>`;
                    });
                } else {
                    html += '<p>‚úÖ –í—Å–µ –∫—É—Ä—Å—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã!</p>';
                }
                
                html += '</div>';
                resultDiv.innerHTML = html;
                
            } catch (error) {
                console.error('Error:', error);
                resultDiv.innerHTML = '<div class="result">‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–æ–≤</div>';
            }
        }
        
        async function showAuditLog() {
            const resultDiv = document.getElementById('result');
            
            resultDiv.innerHTML = '<div class="result">üìà –ó–∞–≥—Ä—É–∂–∞—é audit log...</div>';
            
            try {
                const response = await fetch('/audit-log');
                const data = await response.json();
                
                let html = '<div class="result">';
                html += `<h3>üìà Audit Log - –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${data.total_logs} –¥–µ–π—Å—Ç–≤–∏–π</h3>`;
                
                if (data.logs && data.logs.length > 0) {
                    data.logs.forEach(log => {
                        const date = new Date(log.timestamp).toLocaleString();
                        
                        if (log.action === 'course_assigned') {
                            const priorityColors = {
                                'critical': '#dc3545',
                                'high': '#fd7e14', 
                                'normal': '#28a745',
                                'low': '#6c757d'
                            };
                            
                            html += `<div style="background: #f8f9fa; border-left: 4px solid ${priorityColors[log.priority] || '#28a745'}; padding: 10px; margin: 8px 0; border-radius: 5px; font-size: 13px;">`;
                            html += `<strong>üìö –ö—É—Ä—Å –Ω–∞–∑–Ω–∞—á–µ–Ω:</strong> ${log.course_id}<br>`;
                            html += `üë§ <strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> ${log.user_name || log.user_id} (${log.user_role || ''}, ${log.user_department || ''})<br>`;
                            html += `ü§ñ <strong>–ù–∞–∑–Ω–∞—á–∏–ª:</strong> ${log.assigned_by}<br>`;
                            html += `üéØ <strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</strong> ${log.priority}<br>`;
                            if (log.reason) html += `üìù <strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> ${log.reason}<br>`;
                            html += `‚è∞ <strong>–í—Ä–µ–º—è:</strong> ${date}`;
                            html += `</div>`;
                        } else if (log.action === 'document_processed') {
                            html += `<div style="background: #e7f3ff; border-left: 4px solid #007bff; padding: 10px; margin: 8px 0; border-radius: 5px; font-size: 13px;">`;
                            html += `<strong>üìÑ –î–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω</strong><br>`;
                            html += `üìù <strong>–ü—Ä–æ—Ç–æ–∫–æ–ª:</strong> ${log.protocol_title}<br>`;
                            html += `üéØ <strong>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–π:</strong> ${log.assignments_count}<br>`;
                            html += `‚è∞ <strong>–í—Ä–µ–º—è:</strong> ${date}`;
                            html += `</div>`;
                        }
                    });
                } else {
                    html += '<p>‚ÑπÔ∏è –õ–æ–≥ –ø—É—Å—Ç</p>';
                }
                
                html += '</div>';
                resultDiv.innerHTML = html;
                
            } catch (error) {
                console.error('Error:', error);
                resultDiv.innerHTML = '<div class="result">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ audit log</div>';
            }
        }
    </script>
</body>
</html>
    '''
    return HTMLResponse(content=html)

@app.get("/users-detail")
async def get_users_detail():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"""
    users = mentor.db.get_all_users()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞—Ö
    for user in users:
        user_assignments = [log for log in audit_logger.logs if log.get("user_id") == user["user_id"] and log.get("action") == "course_assigned"]
        user["assignments_count"] = len(user_assignments)
        user["latest_assignment"] = user_assignments[0]["timestamp"] if user_assignments else None
    
    return {"users": users}

@app.get("/courses-detail")
async def get_courses_detail():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö"""
    courses = mentor.db.get_all_courses()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
    for course in courses:
        course_assignments = [log for log in audit_logger.logs if log.get("course_id") == course["course_id"] and log.get("action") == "course_assigned"]
        course["assignments_count"] = len(course_assignments)
        course["latest_assignment"] = course_assignments[0]["timestamp"] if course_assignments else None
        
        # –î–æ–±–∞–≤–ª—è–µ–º AI-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å
        course["renewal_months"] = scheduler.course_periods.get(course["course_id"], "N/A")
        course["priority"] = getattr(scheduler, 'course_priorities', {}).get(course["course_id"], "N/A")
    
    return {"courses": courses}

@app.post("/complete-course")
async def complete_course(user_id: str = Form(...), course_id: str = Form(...)):
    """–û—Ç–º–µ—á–∞–µ—Ç –∫—É—Ä—Å –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        user = mentor.db.get_user(user_id)
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–π–¥–µ–Ω –ª–∏ —É–∂–µ –∫—É—Ä—Å
        if course_completion.is_course_completed(user_id, course_id):
            return {"message": "–ö—É—Ä—Å —É–∂–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π", "success": False}
        
        # –û—Ç–º–µ—á–∞–µ–º –∫—É—Ä—Å –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π
        completion = course_completion.complete_course(user_id, course_id, "manual")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        audit_logger.logs.append({
            "timestamp": completion["completed_at"],
            "action": "course_completed",
            "user_id": user_id,
            "course_id": course_id,
            "completion_method": "manual",
            "id": len(audit_logger.logs) + 1
        })
        audit_logger.save_logs()
        
        return {
            "message": f"–ö—É—Ä—Å {course_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π!",
            "success": True,
            "completion": completion
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/user/{user_id}/dashboard")
async def get_user_dashboard(user_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–∫–∞–∫ –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)"""
    user = mentor.db.get_user(user_id)
    if not user:
        return HTMLResponse(content="<h1>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    assignments = [log for log in audit_logger.logs if log.get("user_id") == user_id and log.get("action") == "course_assigned"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö
    for assignment in assignments:
        course_id = assignment.get("course_id")
        if course_id:
            assignment["is_expired"] = scheduler.is_course_expired(course_id, assignment["timestamp"])
            assignment["renewal_months"] = scheduler.course_periods.get(course_id, "N/A")
            assignment["deadline_days"] = getattr(scheduler, 'course_deadlines', {}).get(course_id, 30)
            assignment["is_completed"] = course_completion.is_course_completed(user_id, course_id)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    assignments.sort(key=lambda x: x["timestamp"], reverse=True)
    
    user_data = {"user": user}
    html = generate_user_dashboard_html(user_data, assignments, scheduler, course_completion)
    
    return HTMLResponse(content=html)

@app.get("/user/{user_id}")
async def get_user_profile(user_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = mentor.db.get_user(user_id)
    if not user:
        return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    assignments = [log for log in audit_logger.logs if log.get("user_id") == user_id and log.get("action") == "course_assigned"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö
    for assignment in assignments:
        course_id = assignment.get("course_id")
        if course_id:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            assignment["is_expired"] = scheduler.is_course_expired(course_id, assignment["timestamp"])
            assignment["renewal_months"] = scheduler.course_periods.get(course_id, "N/A")
            assignment["deadline_days"] = getattr(scheduler, 'course_deadlines', {}).get(course_id, "N/A")
            assignment["is_completed"] = course_completion.is_course_completed(user_id, course_id)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    assignments.sort(key=lambda x: x["timestamp"], reverse=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ —Ç—Ä–µ–∫–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    tracker_history = doc_tracker.get_user_history(user_id)
    
    return {
        "user": user,
        "assignments": assignments,
        "tracker_history": tracker_history,
        "total_assignments": len(assignments),
        "active_courses": len([a for a in assignments if not a.get("is_expired", False) and not a.get("is_completed", False)])
    }

@app.get("/assignments-detail")
async def get_assignments_detail():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è—Ö"""
    assignments = [log for log in audit_logger.logs if log.get("action") == "course_assigned"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    for assignment in assignments:
        if assignment.get("user_id"):
            user = mentor.db.get_user(assignment["user_id"])
            if user:
                assignment["user_name"] = user["name"]
                assignment["user_role"] = user["role"]
                assignment["user_department"] = user["department"]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    assignments.sort(key=lambda x: x["timestamp"], reverse=True)
    
    return {"assignments": assignments[:50]}  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50

@app.get("/stats")
async def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = mentor.db.get_all_users()
    user_count = len(users)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤
    courses = mentor.db.get_all_courses()
    course_count = len(courses)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π (–∏–∑ audit log)
    assignment_logs = [log for log in audit_logger.logs if log.get("action") == "course_assigned"]
    assignment_count = len(assignment_logs)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    document_count = len(doc_tracker.processed_docs)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
    completion_stats = course_completion.get_completion_stats()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    expired_count = 0
    critical_count = 0
    active_count = 0
    
    for log in assignment_logs:
        user_id = log.get("user_id")
        course_id = log.get("course_id")
        if user_id and course_id:
            is_expired = scheduler.is_course_expired(course_id, log["timestamp"])
            is_completed = course_completion.is_course_completed(user_id, course_id)
            priority = log.get("priority", "normal")
            
            if is_expired and not is_completed:
                expired_count += 1
            elif not is_expired and not is_completed:
                active_count += 1
                if priority == "critical":
                    critical_count += 1
    
    return {
        "users": user_count,
        "courses": course_count,
        "assignments": assignment_count,
        "documents": document_count,
        "completions": completion_stats["total_completions"],
        "expired": expired_count,
        "critical": critical_count,
        "active": active_count
    }

@app.get("/document-history")
async def get_document_history():
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    documents = []
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
    for doc_hash, doc_info in doc_tracker.processed_docs.items():
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è
        doc_minute = doc_info["processed_at"][:16]  # 2025-09-18T13:29
        
        doc_assignments = []
        for log in audit_logger.logs:
            if log.get("action") == "course_assigned":
                # –ù–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã - –ø–æ —Ö—ç—à—É, —Å—Ç–∞—Ä—ã–µ - –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                if (log.get("document_hash") == doc_hash or 
                    (not log.get("document_hash") and log.get("timestamp", "")[:16] == doc_minute)):
                    
                    user = mentor.db.get_user(log["user_id"])
                    if user:
                        log["user_name"] = user["name"]
                        log["user_role"] = user["role"]
                        log["user_department"] = user["department"]
                    
                    doc_assignments.append(log)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ skipped_duplicates
        skipped_info = doc_info.get("skipped_duplicates", [])
        
        documents.append({
            "hash": doc_hash,
            "title": doc_info["title"],
            "processed_at": doc_info["processed_at"],
            "assignments_count": len(doc_assignments),
            "assignments": doc_assignments,
            "skipped_duplicates": skipped_info  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ
        })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    documents.sort(key=lambda x: x["processed_at"], reverse=True)
    
    return {
        "total_documents": len(documents),
        "documents": documents
    }

@app.get("/audit-log")
async def get_audit_log():
    """–ü–æ–ª—É—á–∏—Ç—å audit log"""
    recent_logs = audit_logger.get_recent_logs(100)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    for log in recent_logs:
        if log.get("user_id"):
            user = mentor.db.get_user(log["user_id"])
            if user:
                log["user_name"] = user["name"]
                log["user_role"] = user["role"]
                log["user_department"] = user["department"]
    
    return {
        "total_logs": len(recent_logs),
        "logs": recent_logs
    }

@app.get("/completions-detail")
async def get_completions_detail():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞—Ö"""
    completions = course_completion.completions.copy()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    for completion in completions:
        if completion.get("user_id"):
            user = mentor.db.get_user(completion["user_id"])
            if user:
                completion["user_name"] = user["name"]
                completion["user_role"] = user["role"]
                completion["user_department"] = user["department"]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    completions.sort(key=lambda x: x["completed_at"], reverse=True)
    
    return {"completions": completions[:50]}  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50

@app.get("/expired-courses")
async def get_expired_courses():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –∫—É—Ä—Å–∞–º–∏"""
    expired_list = scheduler.get_expired_courses(doc_tracker)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    for item in expired_list:
        user = mentor.db.get_user(item["user_id"])
        if user:
            item["user_name"] = user["name"]
            item["role"] = user["role"]
            item["department"] = user["department"]
    
    return {
        "expired_count": len(expired_list),
        "expired_users": expired_list
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)